AWSTemplateFormatVersion: '2010-09-09'
Description: 'Amazon EKS VPC - Private and Public subnets'

Parameters:
  Organization:
    Type: String
  Project:
    Type: String
  NodeEnv:
    Type: String
  Region:
    Type: String
  VpcBlock: # The CIDR range for the VPC. This should be a valid private (RFC 1918) CIDR range.
    Type: String
    Default: 192.168.0.0/16
  PublicSubnet01Block: # CidrBlock for public subnet 01 within the VPC
    Type: String
    Default: 192.168.0.0/18
  PublicSubnet02Block: # CidrBlock for public subnet 02 within the VPC
    Type: String
    Default: 192.168.64.0/18
  PrivateSubnet01Block: # CidrBlock for private subnet 01 within the VPC
    Type: String
    Default: 192.168.128.0/18
  PrivateSubnet02Block: # CidrBlock for private subnet 02 within the VPC
    Type: String
    Default: 192.168.192.0/18

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Worker Network Configuration"
        Parameters:
          - VpcBlock
          - PublicSubnet01Block
          - PublicSubnet02Block
          - PrivateSubnet01Block
          - PrivateSubnet02Block

Resources:
  # create VPC, this will also create route table, network ACL, Security Group
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub '${NodeEnv}-${Organization}-${Project}-eks-vpc'

  # create internet gateway
  InternetGateway:
    Type: "AWS::EC2::InternetGateway"

  # attach internet gateway to VPC
  VPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  
  # create route table for public subnet
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public Subnets EKS
      - Key: Network
        Value: Public
  
  # create route table for private subnet 1:
  PrivateRouteTable01:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private Subnet EKS 01
      - Key: Network
        Value: Private01

  # create route table for private subnet 2:
  PrivateRouteTable02:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private Subnet EKS 02
      - Key: Network
        Value: Private02
  
  # create public subnet
  PublicSubnet01:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Public Subnet 01
    Properties:
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select
        - 0
        - !GetAZs 
          Ref: 'AWS::Region'
      CidrBlock:
        Ref: PublicSubnet01Block
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: !Sub "${NodeEnv}-${Organization}-${Project}-eks-public-subnet01"
        - Key: kubernetes.io/role/elb
          Value: 1
  
  # create public subnet
  PublicSubnet02:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Public Subnet 02
    Properties:
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select
        - 1
        - !GetAZs 
          Ref: 'AWS::Region'
      CidrBlock:
        Ref: PublicSubnet02Block
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: !Sub "${NodeEnv}-${Organization}-${Project}-eks-public-subnet02"
        - Key: kubernetes.io/role/elb
          Value: 1
  
  # create private subnet
  PrivateSubnet01:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Private Subnet 01
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs 
          Ref: 'AWS::Region'
      CidrBlock:
        Ref: PrivateSubnet01Block
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: !Sub "${NodeEnv}-${Organization}-${Project}-eks-private-subnet01"
        - Key: kubernetes.io/role/internal-elb
          Value: 1
  
  # create private subnet
  PrivateSubnet02:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Private Subnet 02
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs 
          Ref: 'AWS::Region'
      CidrBlock:
        Ref: PrivateSubnet02Block
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: !Sub "${NodeEnv}-${Organization}-${Project}-eks-private-subnet02"
        - Key: kubernetes.io/role/internal-elb
          Value: 1

  # 2 public subnet connect to 1 route table
  PublicSubnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet01
      RouteTableId: !Ref PublicRouteTable
  PublicSubnet02RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet02
      RouteTableId: !Ref PublicRouteTable

  # 1 private subnet connect to 1 route table
  PrivateSubnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet01
      RouteTableId: !Ref PrivateRouteTable01
  PrivateSubnet02RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet02
      RouteTableId: !Ref PrivateRouteTable02

  # connect public route table to internet gateway
  PublicRoute:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # create security group for eks control plane
  ControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Cluster communication with worker nodes
      VpcId: !Ref VPC
  
  # create elastic IP for natgateway az1
  NatGatewayEIP1:
    DependsOn:
    - VPCGatewayAttachment
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc

  # create elastic IP for natgateway az2
  NatGatewayEIP2:
    DependsOn:
    - VPCGatewayAttachment
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
  
  # create netgateway az1
  NatGateway01:
    DependsOn:
    - NatGatewayEIP1
    - PublicSubnet01
    - VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'NatGatewayEIP1.AllocationId'
      SubnetId: !Ref PublicSubnet01
      Tags:
      - Key: Name
        Value: !Sub '${NodeEnv}-${Organization}-${Project}-natgateway-az1'

  # create netgateway az2
  NatGateway02:
    DependsOn:
    - NatGatewayEIP2
    - PublicSubnet02
    - VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'NatGatewayEIP2.AllocationId'
      SubnetId: !Ref PublicSubnet02
      Tags:
      - Key: Name
        Value: !Sub '${NodeEnv}-${Organization}-${Project}-natgateway-az2'

  # create route for natgateway az1
  PrivateRoute01:
    DependsOn:
    - VPCGatewayAttachment
    - NatGateway01
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable01
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway01

  # create route for natgateway az2
  PrivateRoute02:
    DependsOn:
    - VPCGatewayAttachment
    - NatGateway02
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable02
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway02

Outputs:
  PublicSubnet01Id:
    Value: !Ref PublicSubnet01
  PublicSubnet02Id:
    Value: !Ref PublicSubnet02
  # PrivateSubnet01Id:
  #   Value: !Ref PrivateSubnet01
  # PrivateSubnet02Id:
  #   Value: !Ref PrivateSubnet02
  ControlPlaneSecurityGroupId:
    Description: Security group for the cluster control plane communication with worker nodes
    Value: !GetAtt ControlPlaneSecurityGroup.GroupId
